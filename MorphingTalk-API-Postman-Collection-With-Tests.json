{
  "info": {
    "name": "MorphingTalk-API Complete Test Collection with Automated Tests",
    "description": "Complete Postman collection with automated test scripts for all MorphingTalk-API endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://localhost:7218",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "conversationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "messageId",
      "value": "",
      "type": "string"
    },
    {
      "key": "friendEmail",
      "value": "friend@example.com",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "TestPassword123!",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "1. Authentication Tests",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Registration successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.token.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "// Store token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.token) {",
                  "        pm.collectionVariables.set('authToken', jsonData.token);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"fullName\": \"Test User\",\n  \"gender\": \"male\",\n  \"nativeLanguage\": \"en\",\n  \"aboutStatus\": \"Testing MorphingTalk API\",\n  \"profilePicturePath\": \"/uploads/profile-pictures/default.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/Auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.include('Login successful');",
                  "});",
                  "",
                  "pm.test('Response contains valid token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.token.length).to.be.above(100);",
                  "});",
                  "",
                  "// Store token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.token) {",
                  "        pm.collectionVariables.set('authToken', jsonData.token);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"rememberMe\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/Auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Auth", "login"]
            }
          }
        },
        {
          "name": "Check Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Account check successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains account status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/Auth/CheckAccount?email={{testEmail}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Auth", "CheckAccount"],
              "query": [
                {
                  "key": "email",
                  "value": "{{testEmail}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "2. User Management Tests",
      "item": [
        {
          "name": "Get Logged In User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User data retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    const userData = jsonData.data;",
                  "    pm.expect(userData).to.have.property('id');",
                  "    pm.expect(userData).to.have.property('email');",
                  "    pm.expect(userData).to.have.property('fullName');",
                  "});",
                  "",
                  "pm.test('User email matches test email', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.email) {",
                  "        pm.expect(jsonData.data.email).to.equal(pm.collectionVariables.get('testEmail'));",
                  "    }",
                  "});",
                  "",
                  "// Store user ID for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.id) {",
                  "        pm.collectionVariables.set('userId', jsonData.data.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/User/GetLoggedInUser",
              "host": ["{{baseUrl}}"],
              "path": ["api", "User", "GetLoggedInUser"]
            }
          }
        },
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Users list retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains users array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Users array is not empty', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.length).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/User/GetAllUsers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "User", "GetAllUsers"]
            }
          }
        },
        {
          "name": "Update User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile update successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Updated Test User\",\n  \"gender\": \"male\",\n  \"nativeLanguage\": \"en\",\n  \"aboutStatus\": \"Updated status via API testing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/User/UpdateUser",
              "host": ["{{baseUrl}}"],
              "path": ["api", "User", "UpdateUser"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Conversation Tests",
      "item": [
        {
          "name": "Create Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Conversation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains conversation data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    if (jsonData.data) {",
                  "        pm.expect(jsonData.data).to.have.property('id');",
                  "    }",
                  "});",
                  "",
                  "// Store conversation ID for subsequent requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.id) {",
                  "        pm.collectionVariables.set('conversationId', jsonData.data.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Conversation\",\n  \"description\": \"API Testing Conversation\",\n  \"participantEmails\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/Chatting/conversations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Chatting", "conversations"]
            }
          }
        },
        {
          "name": "Get My Conversations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Conversations retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains conversations array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('At least one conversation exists', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.length).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/Chatting/conversations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Chatting", "conversations"]
            }
          }
        },
        {
          "name": "Get Conversation by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Conversation retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains conversation data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    if (jsonData.data) {",
                  "        pm.expect(jsonData.data).to.have.property('id');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/Chatting/conversations/{{conversationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Chatting", "conversations", "{{conversationId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Message Tests",
      "item": [
        {
          "name": "Send Text Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Message sent successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains message data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": 0,\n  \"text\": \"Hello! This is a test message from API testing.\",\n  \"needTranslation\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/Chatting/conversations/{{conversationId}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Chatting", "conversations", "{{conversationId}}", "messages"]
            }
          }
        },
        {
          "name": "Get Messages",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains messages array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('At least one message exists', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Message has required properties', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.length > 0) {",
                  "        const message = jsonData.data[0];",
                  "        pm.expect(message).to.have.property('id');",
                  "        pm.expect(message).to.have.property('type');",
                  "        pm.expect(message).to.have.property('sentAt');",
                  "        ",
                  "        // Store message ID for subsequent tests",
                  "        pm.collectionVariables.set('messageId', message.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/Chatting/conversations/{{conversationId}}/messages?count=50&skip=0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Chatting", "conversations", "{{conversationId}}", "messages"],
              "query": [
                {
                  "key": "count",
                  "value": "50"
                },
                {
                  "key": "skip",
                  "value": "0"
                }
              ]
            }
          }
        },
        {
          "name": "Star Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Message starred successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('starred');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/Chatting/messages/{{messageId}}/star",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Chatting", "messages", "{{messageId}}", "star"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Friendship Tests",
      "item": [
        {
          "name": "Get Friends",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Friends retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains friends array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/Friendship",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Friendship"]
            }
          }
        },
        {
          "name": "Get Blocked Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Blocked users retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains blocked users array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/Friendship/blocked",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Friendship", "blocked"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Voice Training Tests",
      "item": [
        {
          "name": "Get Training Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Training status retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains training status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    if (jsonData.data) {",
                  "        pm.expect(jsonData.data).to.have.property('status');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/VoiceTraining/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "VoiceTraining", "status"]
            }
          }
        }
      ]
    },
    {
      "name": "7. Test Endpoints",
      "item": [
        {
          "name": "Test Firebase Setup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Firebase setup verified', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('Success');",
                  "    pm.expect(jsonData.Success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains Firebase configuration', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('ProjectId');",
                  "    pm.expect(jsonData).to.have.property('Message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/TestFirebase/verify-firebase",
              "host": ["{{baseUrl}}"],
              "path": ["api", "TestFirebase", "verify-firebase"]
            }
          }
        },
        {
          "name": "Test Webhook Payload",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Webhook test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('received');",
                  "    pm.expect(jsonData).to.have.property('parsed');",
                  "});",
                  "",
                  "pm.test('Webhook payload processed correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.received).to.have.property('requestId');",
                  "    pm.expect(jsonData.parsed).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"requestId\": \"test-request-123\",\n  \"modelId\": \"test-model-456\",\n  \"success\": true,\n  \"errorMessage\": null\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/Test/webhook-test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "Test", "webhook-test"]
            }
          }
        }
      ]
    }
  ]
} 